<?xml version="1.0" encoding="utf-8"?>
<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <ItemGroup Label="ProjectConfigurations">
    <ProjectConfiguration Include="Debug|Win32">
      <Configuration>Debug</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|Win32">
      <Configuration>Release</Configuration>
      <Platform>Win32</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Debug|x64">
      <Configuration>Debug</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
    <ProjectConfiguration Include="Release|x64">
      <Configuration>Release</Configuration>
      <Platform>x64</Platform>
    </ProjectConfiguration>
  </ItemGroup>
  <PropertyGroup Label="Globals">
    <VCProjectVersion>17.0</VCProjectVersion>
    <Keyword>Win32Proj</Keyword>
    <ProjectGuid>{65493001-2a58-41ce-9697-9f38846f598f}</ProjectGuid>
    <RootNamespace>StudiECS</RootNamespace>
    <WindowsTargetPlatformVersion>10.0</WindowsTargetPlatformVersion>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.Default.props" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>true</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'" Label="Configuration">
    <ConfigurationType>Application</ConfigurationType>
    <UseDebugLibraries>false</UseDebugLibraries>
    <PlatformToolset>v143</PlatformToolset>
    <WholeProgramOptimization>true</WholeProgramOptimization>
    <CharacterSet>Unicode</CharacterSet>
  </PropertyGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.props" />
  <ImportGroup Label="ExtensionSettings">
  </ImportGroup>
  <ImportGroup Label="Shared">
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <ImportGroup Label="PropertySheets" Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <Import Project="$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props" Condition="exists('$(UserRootDir)\Microsoft.Cpp.$(Platform).user.props')" Label="LocalAppDataPlatform" />
  </ImportGroup>
  <PropertyGroup Label="UserMacros" />
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <IncludePath>$(ProjectDir)\external;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <IncludePath>$(ProjectDir)\external;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <IncludePath>$(ProjectDir)\external;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <PropertyGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <IncludePath>$(ProjectDir)\external;$(IncludePath)</IncludePath>
  </PropertyGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>WIN32;_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <LanguageStandard>stdcpplatest</LanguageStandard>
      <AdditionalOptions>/Zc:__cplusplus %(AdditionalOptions)</AdditionalOptions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|Win32'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>WIN32;NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <LanguageStandard>stdcpplatest</LanguageStandard>
      <AdditionalOptions>/Zc:__cplusplus %(AdditionalOptions)</AdditionalOptions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Debug|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>_DEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <LanguageStandard>stdcpplatest</LanguageStandard>
      <AdditionalOptions>/Zc:__cplusplus %(AdditionalOptions)</AdditionalOptions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemDefinitionGroup Condition="'$(Configuration)|$(Platform)'=='Release|x64'">
    <ClCompile>
      <WarningLevel>Level3</WarningLevel>
      <FunctionLevelLinking>true</FunctionLevelLinking>
      <IntrinsicFunctions>true</IntrinsicFunctions>
      <SDLCheck>true</SDLCheck>
      <PreprocessorDefinitions>NDEBUG;_CONSOLE;%(PreprocessorDefinitions)</PreprocessorDefinitions>
      <ConformanceMode>true</ConformanceMode>
      <LanguageStandard>stdcpplatest</LanguageStandard>
      <AdditionalOptions>/Zc:__cplusplus %(AdditionalOptions)</AdditionalOptions>
    </ClCompile>
    <Link>
      <SubSystem>Console</SubSystem>
      <EnableCOMDATFolding>true</EnableCOMDATFolding>
      <OptimizeReferences>true</OptimizeReferences>
      <GenerateDebugInformation>true</GenerateDebugInformation>
    </Link>
  </ItemDefinitionGroup>
  <ItemGroup>
    <ClCompile Include="main.cpp" />
  </ItemGroup>
  <ItemGroup>
    <ClInclude Include="ArchetypeBrunch.h" />
    <ClInclude Include="ArchetypeInfo.h" />
    <ClInclude Include="ArrayView.h" />
    <ClInclude Include="boost\hana\accessors.hpp" />
    <ClInclude Include="boost\hana\adapt_adt.hpp" />
    <ClInclude Include="boost\hana\adapt_struct.hpp" />
    <ClInclude Include="boost\hana\adjust.hpp" />
    <ClInclude Include="boost\hana\adjust_if.hpp" />
    <ClInclude Include="boost\hana\all.hpp" />
    <ClInclude Include="boost\hana\all_of.hpp" />
    <ClInclude Include="boost\hana\and.hpp" />
    <ClInclude Include="boost\hana\any.hpp" />
    <ClInclude Include="boost\hana\any_of.hpp" />
    <ClInclude Include="boost\hana\ap.hpp" />
    <ClInclude Include="boost\hana\append.hpp" />
    <ClInclude Include="boost\hana\assert.hpp" />
    <ClInclude Include="boost\hana\at.hpp" />
    <ClInclude Include="boost\hana\at_key.hpp" />
    <ClInclude Include="boost\hana\back.hpp" />
    <ClInclude Include="boost\hana\basic_tuple.hpp" />
    <ClInclude Include="boost\hana\bool.hpp" />
    <ClInclude Include="boost\hana\cartesian_product.hpp" />
    <ClInclude Include="boost\hana\chain.hpp" />
    <ClInclude Include="boost\hana\comparing.hpp" />
    <ClInclude Include="boost\hana\concat.hpp" />
    <ClInclude Include="boost\hana\concept.hpp" />
    <ClInclude Include="boost\hana\concept\applicative.hpp" />
    <ClInclude Include="boost\hana\concept\comonad.hpp" />
    <ClInclude Include="boost\hana\concept\comparable.hpp" />
    <ClInclude Include="boost\hana\concept\constant.hpp" />
    <ClInclude Include="boost\hana\concept\euclidean_ring.hpp" />
    <ClInclude Include="boost\hana\concept\foldable.hpp" />
    <ClInclude Include="boost\hana\concept\functor.hpp" />
    <ClInclude Include="boost\hana\concept\group.hpp" />
    <ClInclude Include="boost\hana\concept\hashable.hpp" />
    <ClInclude Include="boost\hana\concept\integral_constant.hpp" />
    <ClInclude Include="boost\hana\concept\iterable.hpp" />
    <ClInclude Include="boost\hana\concept\logical.hpp" />
    <ClInclude Include="boost\hana\concept\metafunction.hpp" />
    <ClInclude Include="boost\hana\concept\monad.hpp" />
    <ClInclude Include="boost\hana\concept\monad_plus.hpp" />
    <ClInclude Include="boost\hana\concept\monoid.hpp" />
    <ClInclude Include="boost\hana\concept\orderable.hpp" />
    <ClInclude Include="boost\hana\concept\product.hpp" />
    <ClInclude Include="boost\hana\concept\ring.hpp" />
    <ClInclude Include="boost\hana\concept\searchable.hpp" />
    <ClInclude Include="boost\hana\concept\sequence.hpp" />
    <ClInclude Include="boost\hana\concept\struct.hpp" />
    <ClInclude Include="boost\hana\config.hpp" />
    <ClInclude Include="boost\hana\contains.hpp" />
    <ClInclude Include="boost\hana\core.hpp" />
    <ClInclude Include="boost\hana\core\common.hpp" />
    <ClInclude Include="boost\hana\core\default.hpp" />
    <ClInclude Include="boost\hana\core\dispatch.hpp" />
    <ClInclude Include="boost\hana\core\is_a.hpp" />
    <ClInclude Include="boost\hana\core\make.hpp" />
    <ClInclude Include="boost\hana\core\tag_of.hpp" />
    <ClInclude Include="boost\hana\core\to.hpp" />
    <ClInclude Include="boost\hana\core\when.hpp" />
    <ClInclude Include="boost\hana\count.hpp" />
    <ClInclude Include="boost\hana\count_if.hpp" />
    <ClInclude Include="boost\hana\cycle.hpp" />
    <ClInclude Include="boost\hana\define_struct.hpp" />
    <ClInclude Include="boost\hana\detail\algorithm.hpp" />
    <ClInclude Include="boost\hana\detail\any_of.hpp" />
    <ClInclude Include="boost\hana\detail\array.hpp" />
    <ClInclude Include="boost\hana\detail\canonical_constant.hpp" />
    <ClInclude Include="boost\hana\detail\concepts.hpp" />
    <ClInclude Include="boost\hana\detail\create.hpp" />
    <ClInclude Include="boost\hana\detail\decay.hpp" />
    <ClInclude Include="boost\hana\detail\dispatch_if.hpp" />
    <ClInclude Include="boost\hana\detail\ebo.hpp" />
    <ClInclude Include="boost\hana\detail\fast_and.hpp" />
    <ClInclude Include="boost\hana\detail\first_unsatisfied_index.hpp" />
    <ClInclude Include="boost\hana\detail\hash_table.hpp" />
    <ClInclude Include="boost\hana\detail\has_common_embedding.hpp" />
    <ClInclude Include="boost\hana\detail\has_duplicates.hpp" />
    <ClInclude Include="boost\hana\detail\index_if.hpp" />
    <ClInclude Include="boost\hana\detail\integral_constant.hpp" />
    <ClInclude Include="boost\hana\detail\intrinsics.hpp" />
    <ClInclude Include="boost\hana\detail\nested_by.hpp" />
    <ClInclude Include="boost\hana\detail\nested_by_fwd.hpp" />
    <ClInclude Include="boost\hana\detail\nested_than.hpp" />
    <ClInclude Include="boost\hana\detail\nested_than_fwd.hpp" />
    <ClInclude Include="boost\hana\detail\nested_to.hpp" />
    <ClInclude Include="boost\hana\detail\nested_to_fwd.hpp" />
    <ClInclude Include="boost\hana\detail\operators\adl.hpp" />
    <ClInclude Include="boost\hana\detail\operators\arithmetic.hpp" />
    <ClInclude Include="boost\hana\detail\operators\comparable.hpp" />
    <ClInclude Include="boost\hana\detail\operators\iterable.hpp" />
    <ClInclude Include="boost\hana\detail\operators\logical.hpp" />
    <ClInclude Include="boost\hana\detail\operators\monad.hpp" />
    <ClInclude Include="boost\hana\detail\operators\orderable.hpp" />
    <ClInclude Include="boost\hana\detail\operators\searchable.hpp" />
    <ClInclude Include="boost\hana\detail\preprocessor.hpp" />
    <ClInclude Include="boost\hana\detail\std_common_type.hpp" />
    <ClInclude Include="boost\hana\detail\struct_macros.hpp" />
    <ClInclude Include="boost\hana\detail\type_at.hpp" />
    <ClInclude Include="boost\hana\detail\type_foldl1.hpp" />
    <ClInclude Include="boost\hana\detail\type_foldr1.hpp" />
    <ClInclude Include="boost\hana\detail\unpack_flatten.hpp" />
    <ClInclude Include="boost\hana\detail\variadic\at.hpp" />
    <ClInclude Include="boost\hana\detail\variadic\drop_into.hpp" />
    <ClInclude Include="boost\hana\detail\variadic\foldl1.hpp" />
    <ClInclude Include="boost\hana\detail\variadic\foldr1.hpp" />
    <ClInclude Include="boost\hana\detail\variadic\reverse_apply.hpp" />
    <ClInclude Include="boost\hana\detail\variadic\reverse_apply\flat.hpp" />
    <ClInclude Include="boost\hana\detail\variadic\reverse_apply\unrolled.hpp" />
    <ClInclude Include="boost\hana\detail\variadic\split_at.hpp" />
    <ClInclude Include="boost\hana\detail\variadic\take.hpp" />
    <ClInclude Include="boost\hana\detail\void_t.hpp" />
    <ClInclude Include="boost\hana\detail\wrong.hpp" />
    <ClInclude Include="boost\hana\difference.hpp" />
    <ClInclude Include="boost\hana\div.hpp" />
    <ClInclude Include="boost\hana\drop_back.hpp" />
    <ClInclude Include="boost\hana\drop_front.hpp" />
    <ClInclude Include="boost\hana\drop_front_exactly.hpp" />
    <ClInclude Include="boost\hana\drop_while.hpp" />
    <ClInclude Include="boost\hana\duplicate.hpp" />
    <ClInclude Include="boost\hana\empty.hpp" />
    <ClInclude Include="boost\hana\equal.hpp" />
    <ClInclude Include="boost\hana\erase_key.hpp" />
    <ClInclude Include="boost\hana\eval.hpp" />
    <ClInclude Include="boost\hana\eval_if.hpp" />
    <ClInclude Include="boost\hana\experimental\printable.hpp" />
    <ClInclude Include="boost\hana\experimental\types.hpp" />
    <ClInclude Include="boost\hana\experimental\type_name.hpp" />
    <ClInclude Include="boost\hana\experimental\view.hpp" />
    <ClInclude Include="boost\hana\extend.hpp" />
    <ClInclude Include="boost\hana\extract.hpp" />
    <ClInclude Include="boost\hana\ext\boost.hpp" />
    <ClInclude Include="boost\hana\ext\boost\fusion.hpp" />
    <ClInclude Include="boost\hana\ext\boost\fusion\deque.hpp" />
    <ClInclude Include="boost\hana\ext\boost\fusion\detail\common.hpp" />
    <ClInclude Include="boost\hana\ext\boost\fusion\list.hpp" />
    <ClInclude Include="boost\hana\ext\boost\fusion\tuple.hpp" />
    <ClInclude Include="boost\hana\ext\boost\fusion\vector.hpp" />
    <ClInclude Include="boost\hana\ext\boost\mpl.hpp" />
    <ClInclude Include="boost\hana\ext\boost\mpl\integral_c.hpp" />
    <ClInclude Include="boost\hana\ext\boost\mpl\list.hpp" />
    <ClInclude Include="boost\hana\ext\boost\mpl\vector.hpp" />
    <ClInclude Include="boost\hana\ext\boost\tuple.hpp" />
    <ClInclude Include="boost\hana\ext\std.hpp" />
    <ClInclude Include="boost\hana\ext\std\array.hpp" />
    <ClInclude Include="boost\hana\ext\std\integer_sequence.hpp" />
    <ClInclude Include="boost\hana\ext\std\integral_constant.hpp" />
    <ClInclude Include="boost\hana\ext\std\pair.hpp" />
    <ClInclude Include="boost\hana\ext\std\ratio.hpp" />
    <ClInclude Include="boost\hana\ext\std\tuple.hpp" />
    <ClInclude Include="boost\hana\ext\std\vector.hpp" />
    <ClInclude Include="boost\hana\fill.hpp" />
    <ClInclude Include="boost\hana\filter.hpp" />
    <ClInclude Include="boost\hana\find.hpp" />
    <ClInclude Include="boost\hana\find_if.hpp" />
    <ClInclude Include="boost\hana\first.hpp" />
    <ClInclude Include="boost\hana\flatten.hpp" />
    <ClInclude Include="boost\hana\fold.hpp" />
    <ClInclude Include="boost\hana\fold_left.hpp" />
    <ClInclude Include="boost\hana\fold_right.hpp" />
    <ClInclude Include="boost\hana\for_each.hpp" />
    <ClInclude Include="boost\hana\front.hpp" />
    <ClInclude Include="boost\hana\functional.hpp" />
    <ClInclude Include="boost\hana\functional\always.hpp" />
    <ClInclude Include="boost\hana\functional\apply.hpp" />
    <ClInclude Include="boost\hana\functional\arg.hpp" />
    <ClInclude Include="boost\hana\functional\capture.hpp" />
    <ClInclude Include="boost\hana\functional\compose.hpp" />
    <ClInclude Include="boost\hana\functional\curry.hpp" />
    <ClInclude Include="boost\hana\functional\demux.hpp" />
    <ClInclude Include="boost\hana\functional\fix.hpp" />
    <ClInclude Include="boost\hana\functional\flip.hpp" />
    <ClInclude Include="boost\hana\functional\id.hpp" />
    <ClInclude Include="boost\hana\functional\infix.hpp" />
    <ClInclude Include="boost\hana\functional\iterate.hpp" />
    <ClInclude Include="boost\hana\functional\lockstep.hpp" />
    <ClInclude Include="boost\hana\functional\on.hpp" />
    <ClInclude Include="boost\hana\functional\overload.hpp" />
    <ClInclude Include="boost\hana\functional\overload_linearly.hpp" />
    <ClInclude Include="boost\hana\functional\partial.hpp" />
    <ClInclude Include="boost\hana\functional\placeholder.hpp" />
    <ClInclude Include="boost\hana\functional\reverse_partial.hpp" />
    <ClInclude Include="boost\hana\fuse.hpp" />
    <ClInclude Include="boost\hana\fwd\accessors.hpp" />
    <ClInclude Include="boost\hana\fwd\adapt_adt.hpp" />
    <ClInclude Include="boost\hana\fwd\adapt_struct.hpp" />
    <ClInclude Include="boost\hana\fwd\adjust.hpp" />
    <ClInclude Include="boost\hana\fwd\adjust_if.hpp" />
    <ClInclude Include="boost\hana\fwd\all.hpp" />
    <ClInclude Include="boost\hana\fwd\all_of.hpp" />
    <ClInclude Include="boost\hana\fwd\and.hpp" />
    <ClInclude Include="boost\hana\fwd\any.hpp" />
    <ClInclude Include="boost\hana\fwd\any_of.hpp" />
    <ClInclude Include="boost\hana\fwd\ap.hpp" />
    <ClInclude Include="boost\hana\fwd\append.hpp" />
    <ClInclude Include="boost\hana\fwd\at.hpp" />
    <ClInclude Include="boost\hana\fwd\at_key.hpp" />
    <ClInclude Include="boost\hana\fwd\back.hpp" />
    <ClInclude Include="boost\hana\fwd\basic_tuple.hpp" />
    <ClInclude Include="boost\hana\fwd\bool.hpp" />
    <ClInclude Include="boost\hana\fwd\cartesian_product.hpp" />
    <ClInclude Include="boost\hana\fwd\chain.hpp" />
    <ClInclude Include="boost\hana\fwd\comparing.hpp" />
    <ClInclude Include="boost\hana\fwd\concat.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\applicative.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\comonad.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\comparable.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\constant.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\euclidean_ring.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\foldable.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\functor.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\group.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\hashable.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\integral_constant.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\iterable.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\logical.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\metafunction.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\monad.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\monad_plus.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\monoid.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\orderable.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\product.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\ring.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\searchable.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\sequence.hpp" />
    <ClInclude Include="boost\hana\fwd\concept\struct.hpp" />
    <ClInclude Include="boost\hana\fwd\contains.hpp" />
    <ClInclude Include="boost\hana\fwd\core.hpp" />
    <ClInclude Include="boost\hana\fwd\core\common.hpp" />
    <ClInclude Include="boost\hana\fwd\core\default.hpp" />
    <ClInclude Include="boost\hana\fwd\core\is_a.hpp" />
    <ClInclude Include="boost\hana\fwd\core\make.hpp" />
    <ClInclude Include="boost\hana\fwd\core\tag_of.hpp" />
    <ClInclude Include="boost\hana\fwd\core\to.hpp" />
    <ClInclude Include="boost\hana\fwd\core\when.hpp" />
    <ClInclude Include="boost\hana\fwd\count.hpp" />
    <ClInclude Include="boost\hana\fwd\count_if.hpp" />
    <ClInclude Include="boost\hana\fwd\cycle.hpp" />
    <ClInclude Include="boost\hana\fwd\define_struct.hpp" />
    <ClInclude Include="boost\hana\fwd\difference.hpp" />
    <ClInclude Include="boost\hana\fwd\div.hpp" />
    <ClInclude Include="boost\hana\fwd\drop_back.hpp" />
    <ClInclude Include="boost\hana\fwd\drop_front.hpp" />
    <ClInclude Include="boost\hana\fwd\drop_front_exactly.hpp" />
    <ClInclude Include="boost\hana\fwd\drop_while.hpp" />
    <ClInclude Include="boost\hana\fwd\duplicate.hpp" />
    <ClInclude Include="boost\hana\fwd\empty.hpp" />
    <ClInclude Include="boost\hana\fwd\equal.hpp" />
    <ClInclude Include="boost\hana\fwd\erase_key.hpp" />
    <ClInclude Include="boost\hana\fwd\eval.hpp" />
    <ClInclude Include="boost\hana\fwd\eval_if.hpp" />
    <ClInclude Include="boost\hana\fwd\extend.hpp" />
    <ClInclude Include="boost\hana\fwd\extract.hpp" />
    <ClInclude Include="boost\hana\fwd\fill.hpp" />
    <ClInclude Include="boost\hana\fwd\filter.hpp" />
    <ClInclude Include="boost\hana\fwd\find.hpp" />
    <ClInclude Include="boost\hana\fwd\find_if.hpp" />
    <ClInclude Include="boost\hana\fwd\first.hpp" />
    <ClInclude Include="boost\hana\fwd\flatten.hpp" />
    <ClInclude Include="boost\hana\fwd\fold.hpp" />
    <ClInclude Include="boost\hana\fwd\fold_left.hpp" />
    <ClInclude Include="boost\hana\fwd\fold_right.hpp" />
    <ClInclude Include="boost\hana\fwd\for_each.hpp" />
    <ClInclude Include="boost\hana\fwd\front.hpp" />
    <ClInclude Include="boost\hana\fwd\fuse.hpp" />
    <ClInclude Include="boost\hana\fwd\greater.hpp" />
    <ClInclude Include="boost\hana\fwd\greater_equal.hpp" />
    <ClInclude Include="boost\hana\fwd\group.hpp" />
    <ClInclude Include="boost\hana\fwd\hash.hpp" />
    <ClInclude Include="boost\hana\fwd\if.hpp" />
    <ClInclude Include="boost\hana\fwd\index_if.hpp" />
    <ClInclude Include="boost\hana\fwd\insert.hpp" />
    <ClInclude Include="boost\hana\fwd\insert_range.hpp" />
    <ClInclude Include="boost\hana\fwd\integral_constant.hpp" />
    <ClInclude Include="boost\hana\fwd\intersection.hpp" />
    <ClInclude Include="boost\hana\fwd\intersperse.hpp" />
    <ClInclude Include="boost\hana\fwd\is_disjoint.hpp" />
    <ClInclude Include="boost\hana\fwd\is_empty.hpp" />
    <ClInclude Include="boost\hana\fwd\is_subset.hpp" />
    <ClInclude Include="boost\hana\fwd\keys.hpp" />
    <ClInclude Include="boost\hana\fwd\lazy.hpp" />
    <ClInclude Include="boost\hana\fwd\length.hpp" />
    <ClInclude Include="boost\hana\fwd\less.hpp" />
    <ClInclude Include="boost\hana\fwd\less_equal.hpp" />
    <ClInclude Include="boost\hana\fwd\lexicographical_compare.hpp" />
    <ClInclude Include="boost\hana\fwd\lift.hpp" />
    <ClInclude Include="boost\hana\fwd\map.hpp" />
    <ClInclude Include="boost\hana\fwd\max.hpp" />
    <ClInclude Include="boost\hana\fwd\maximum.hpp" />
    <ClInclude Include="boost\hana\fwd\members.hpp" />
    <ClInclude Include="boost\hana\fwd\min.hpp" />
    <ClInclude Include="boost\hana\fwd\minimum.hpp" />
    <ClInclude Include="boost\hana\fwd\minus.hpp" />
    <ClInclude Include="boost\hana\fwd\mod.hpp" />
    <ClInclude Include="boost\hana\fwd\monadic_compose.hpp" />
    <ClInclude Include="boost\hana\fwd\monadic_fold_left.hpp" />
    <ClInclude Include="boost\hana\fwd\monadic_fold_right.hpp" />
    <ClInclude Include="boost\hana\fwd\mult.hpp" />
    <ClInclude Include="boost\hana\fwd\negate.hpp" />
    <ClInclude Include="boost\hana\fwd\none.hpp" />
    <ClInclude Include="boost\hana\fwd\none_of.hpp" />
    <ClInclude Include="boost\hana\fwd\not.hpp" />
    <ClInclude Include="boost\hana\fwd\not_equal.hpp" />
    <ClInclude Include="boost\hana\fwd\one.hpp" />
    <ClInclude Include="boost\hana\fwd\optional.hpp" />
    <ClInclude Include="boost\hana\fwd\or.hpp" />
    <ClInclude Include="boost\hana\fwd\ordering.hpp" />
    <ClInclude Include="boost\hana\fwd\pair.hpp" />
    <ClInclude Include="boost\hana\fwd\partition.hpp" />
    <ClInclude Include="boost\hana\fwd\permutations.hpp" />
    <ClInclude Include="boost\hana\fwd\plus.hpp" />
    <ClInclude Include="boost\hana\fwd\power.hpp" />
    <ClInclude Include="boost\hana\fwd\prefix.hpp" />
    <ClInclude Include="boost\hana\fwd\prepend.hpp" />
    <ClInclude Include="boost\hana\fwd\product.hpp" />
    <ClInclude Include="boost\hana\fwd\range.hpp" />
    <ClInclude Include="boost\hana\fwd\remove.hpp" />
    <ClInclude Include="boost\hana\fwd\remove_at.hpp" />
    <ClInclude Include="boost\hana\fwd\remove_if.hpp" />
    <ClInclude Include="boost\hana\fwd\remove_range.hpp" />
    <ClInclude Include="boost\hana\fwd\repeat.hpp" />
    <ClInclude Include="boost\hana\fwd\replace.hpp" />
    <ClInclude Include="boost\hana\fwd\replace_if.hpp" />
    <ClInclude Include="boost\hana\fwd\replicate.hpp" />
    <ClInclude Include="boost\hana\fwd\reverse.hpp" />
    <ClInclude Include="boost\hana\fwd\reverse_fold.hpp" />
    <ClInclude Include="boost\hana\fwd\scan_left.hpp" />
    <ClInclude Include="boost\hana\fwd\scan_right.hpp" />
    <ClInclude Include="boost\hana\fwd\second.hpp" />
    <ClInclude Include="boost\hana\fwd\set.hpp" />
    <ClInclude Include="boost\hana\fwd\size.hpp" />
    <ClInclude Include="boost\hana\fwd\slice.hpp" />
    <ClInclude Include="boost\hana\fwd\sort.hpp" />
    <ClInclude Include="boost\hana\fwd\span.hpp" />
    <ClInclude Include="boost\hana\fwd\string.hpp" />
    <ClInclude Include="boost\hana\fwd\suffix.hpp" />
    <ClInclude Include="boost\hana\fwd\sum.hpp" />
    <ClInclude Include="boost\hana\fwd\symmetric_difference.hpp" />
    <ClInclude Include="boost\hana\fwd\take_back.hpp" />
    <ClInclude Include="boost\hana\fwd\take_front.hpp" />
    <ClInclude Include="boost\hana\fwd\take_while.hpp" />
    <ClInclude Include="boost\hana\fwd\tap.hpp" />
    <ClInclude Include="boost\hana\fwd\then.hpp" />
    <ClInclude Include="boost\hana\fwd\transform.hpp" />
    <ClInclude Include="boost\hana\fwd\tuple.hpp" />
    <ClInclude Include="boost\hana\fwd\type.hpp" />
    <ClInclude Include="boost\hana\fwd\unfold_left.hpp" />
    <ClInclude Include="boost\hana\fwd\unfold_right.hpp" />
    <ClInclude Include="boost\hana\fwd\union.hpp" />
    <ClInclude Include="boost\hana\fwd\unique.hpp" />
    <ClInclude Include="boost\hana\fwd\unpack.hpp" />
    <ClInclude Include="boost\hana\fwd\value.hpp" />
    <ClInclude Include="boost\hana\fwd\while.hpp" />
    <ClInclude Include="boost\hana\fwd\zero.hpp" />
    <ClInclude Include="boost\hana\fwd\zip.hpp" />
    <ClInclude Include="boost\hana\fwd\zip_shortest.hpp" />
    <ClInclude Include="boost\hana\fwd\zip_shortest_with.hpp" />
    <ClInclude Include="boost\hana\fwd\zip_with.hpp" />
    <ClInclude Include="boost\hana\greater.hpp" />
    <ClInclude Include="boost\hana\greater_equal.hpp" />
    <ClInclude Include="boost\hana\group.hpp" />
    <ClInclude Include="boost\hana\hash.hpp" />
    <ClInclude Include="boost\hana\if.hpp" />
    <ClInclude Include="boost\hana\index_if.hpp" />
    <ClInclude Include="boost\hana\insert.hpp" />
    <ClInclude Include="boost\hana\insert_range.hpp" />
    <ClInclude Include="boost\hana\integral_constant.hpp" />
    <ClInclude Include="boost\hana\intersection.hpp" />
    <ClInclude Include="boost\hana\intersperse.hpp" />
    <ClInclude Include="boost\hana\is_disjoint.hpp" />
    <ClInclude Include="boost\hana\is_empty.hpp" />
    <ClInclude Include="boost\hana\is_subset.hpp" />
    <ClInclude Include="boost\hana\keys.hpp" />
    <ClInclude Include="boost\hana\lazy.hpp" />
    <ClInclude Include="boost\hana\length.hpp" />
    <ClInclude Include="boost\hana\less.hpp" />
    <ClInclude Include="boost\hana\less_equal.hpp" />
    <ClInclude Include="boost\hana\lexicographical_compare.hpp" />
    <ClInclude Include="boost\hana\lift.hpp" />
    <ClInclude Include="boost\hana\map.hpp" />
    <ClInclude Include="boost\hana\max.hpp" />
    <ClInclude Include="boost\hana\maximum.hpp" />
    <ClInclude Include="boost\hana\members.hpp" />
    <ClInclude Include="boost\hana\min.hpp" />
    <ClInclude Include="boost\hana\minimum.hpp" />
    <ClInclude Include="boost\hana\minus.hpp" />
    <ClInclude Include="boost\hana\mod.hpp" />
    <ClInclude Include="boost\hana\monadic_compose.hpp" />
    <ClInclude Include="boost\hana\monadic_fold_left.hpp" />
    <ClInclude Include="boost\hana\monadic_fold_right.hpp" />
    <ClInclude Include="boost\hana\mult.hpp" />
    <ClInclude Include="boost\hana\negate.hpp" />
    <ClInclude Include="boost\hana\none.hpp" />
    <ClInclude Include="boost\hana\none_of.hpp" />
    <ClInclude Include="boost\hana\not.hpp" />
    <ClInclude Include="boost\hana\not_equal.hpp" />
    <ClInclude Include="boost\hana\one.hpp" />
    <ClInclude Include="boost\hana\optional.hpp" />
    <ClInclude Include="boost\hana\or.hpp" />
    <ClInclude Include="boost\hana\ordering.hpp" />
    <ClInclude Include="boost\hana\pair.hpp" />
    <ClInclude Include="boost\hana\partition.hpp" />
    <ClInclude Include="boost\hana\permutations.hpp" />
    <ClInclude Include="boost\hana\plus.hpp" />
    <ClInclude Include="boost\hana\power.hpp" />
    <ClInclude Include="boost\hana\prefix.hpp" />
    <ClInclude Include="boost\hana\prepend.hpp" />
    <ClInclude Include="boost\hana\product.hpp" />
    <ClInclude Include="boost\hana\range.hpp" />
    <ClInclude Include="boost\hana\remove.hpp" />
    <ClInclude Include="boost\hana\remove_at.hpp" />
    <ClInclude Include="boost\hana\remove_if.hpp" />
    <ClInclude Include="boost\hana\remove_range.hpp" />
    <ClInclude Include="boost\hana\repeat.hpp" />
    <ClInclude Include="boost\hana\replace.hpp" />
    <ClInclude Include="boost\hana\replace_if.hpp" />
    <ClInclude Include="boost\hana\replicate.hpp" />
    <ClInclude Include="boost\hana\reverse.hpp" />
    <ClInclude Include="boost\hana\reverse_fold.hpp" />
    <ClInclude Include="boost\hana\scan_left.hpp" />
    <ClInclude Include="boost\hana\scan_right.hpp" />
    <ClInclude Include="boost\hana\second.hpp" />
    <ClInclude Include="boost\hana\set.hpp" />
    <ClInclude Include="boost\hana\size.hpp" />
    <ClInclude Include="boost\hana\slice.hpp" />
    <ClInclude Include="boost\hana\sort.hpp" />
    <ClInclude Include="boost\hana\span.hpp" />
    <ClInclude Include="boost\hana\string.hpp" />
    <ClInclude Include="boost\hana\suffix.hpp" />
    <ClInclude Include="boost\hana\sum.hpp" />
    <ClInclude Include="boost\hana\symmetric_difference.hpp" />
    <ClInclude Include="boost\hana\take_back.hpp" />
    <ClInclude Include="boost\hana\take_front.hpp" />
    <ClInclude Include="boost\hana\take_while.hpp" />
    <ClInclude Include="boost\hana\tap.hpp" />
    <ClInclude Include="boost\hana\then.hpp" />
    <ClInclude Include="boost\hana\traits.hpp" />
    <ClInclude Include="boost\hana\transform.hpp" />
    <ClInclude Include="boost\hana\tuple.hpp" />
    <ClInclude Include="boost\hana\type.hpp" />
    <ClInclude Include="boost\hana\unfold_left.hpp" />
    <ClInclude Include="boost\hana\unfold_right.hpp" />
    <ClInclude Include="boost\hana\union.hpp" />
    <ClInclude Include="boost\hana\unique.hpp" />
    <ClInclude Include="boost\hana\unpack.hpp" />
    <ClInclude Include="boost\hana\value.hpp" />
    <ClInclude Include="boost\hana\version.hpp" />
    <ClInclude Include="boost\hana\while.hpp" />
    <ClInclude Include="boost\hana\zero.hpp" />
    <ClInclude Include="boost\hana\zip.hpp" />
    <ClInclude Include="boost\hana\zip_shortest.hpp" />
    <ClInclude Include="boost\hana\zip_shortest_with.hpp" />
    <ClInclude Include="boost\hana\zip_with.hpp" />
    <ClInclude Include="CdIdGenerator.h" />
    <ClInclude Include="Chunk.h" />
    <ClInclude Include="ChunkTest.h" />
    <ClInclude Include="Entity.h" />
    <ClInclude Include="EnumUtil.h" />
    <ClInclude Include="EnumUtilTest.h" />
    <ClInclude Include="external\boost\hana.hpp" />
    <ClInclude Include="HanaTest.h" />
    <ClInclude Include="OffsetArrayView.h" />
    <ClInclude Include="TypeUtil.h" />
    <ClInclude Include="MurMur3.h" />
    <ClInclude Include="SparseSet.h" />
    <ClInclude Include="Type.h" />
    <ClInclude Include="TypeIDGenerator.h" />
    <ClInclude Include="TypeIDTest.h" />
    <ClInclude Include="TypeInfo.h" />
    <ClInclude Include="TypeInfoTest.h" />
    <ClInclude Include="Util.h" />
    <ClInclude Include="UtilTest.h" />
    <ClInclude Include="World.h" />
  </ItemGroup>
  <ItemGroup>
    <None Include="boost\hana\detail\struct_macros.hpp.erb" />
  </ItemGroup>
  <Import Project="$(VCTargetsPath)\Microsoft.Cpp.targets" />
  <ImportGroup Label="ExtensionTargets">
  </ImportGroup>
</Project>